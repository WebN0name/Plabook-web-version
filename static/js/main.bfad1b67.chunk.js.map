{"version":3,"sources":["assets/Bird.png","Plabook.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Plabook","props","_loop","window","requestAnimationFrame","analizer","getByteFrequencyData","frequency","setState","checkVoice","_setCheckVoice","state","isRecord","borderColor","color","_getWordsArray","text","split","finalText","_id","i","length","oneWord","id","word","style","push","texts","_setBackground","image","backgroundImage","_clickArrowRight","currentId","names","index","per","percents","currentName","currentText","currentImage","images","_clickArrowLeft","_countPercents","percent","perStr","String","_countWidth","width","_stopRecord","a","Recorder","stop","_getResult","result","voice","voiceBlob","Blob","type","_getBinaryString","finalString","console","log","axios","post","textName","record","then","r","data","recordId","answers","counter","tmp","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsDataURL","ondataavailable","e","_clickRecordButton","microIcon","faPause","_startRecord","faMicrophone","_setAnswerColor","backgroundColor","lineHeight","borderRadius","fontSize","_checkLeftArrow","visibility","_checkRightArrow","Uint8Array","navigator","mediaDevices","getUserMedia","audio","video","stream","isHavePermition","MediaRecorder","context","AudioContext","createAnalyser","createMediaStreamSource","connect","this","_getPermition","get","name","start","className","map","item","key","src","bird","href","onClick","icon","faArrowLeft","faArrowRight","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bfad1b67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bird.5c5bb4c1.png\";","import React from 'react';\r\nimport './App.css';\r\nimport axios from 'axios'\r\nimport bird from './assets/Bird.png'\r\nimport { faArrowLeft, faArrowRight, faMicrophone, faPause } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nexport default class Plabook extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.Recorder = null\r\n        this.frequency = new Uint8Array(32*2)\r\n        this.analizer = null\r\n        this.state = {\r\n            images: [],\r\n            texts: [],\r\n            names: [],\r\n            currentImage: '',\r\n            currentName: '',\r\n            currentText: [],\r\n            currentId: 0,\r\n            percents: 0,\r\n            microIcon: faMicrophone,\r\n            isRecord: false,\r\n            checkVoice: 0\r\n        }\r\n    }\r\n\r\n    _getPermition(){\r\n        navigator.mediaDevices.getUserMedia({ audio: true, video: false}).then(stream => {\r\n            this.setState({\r\n                isHavePermition: true\r\n            })\r\n            this.Recorder = new MediaRecorder(stream)\r\n            const context = new AudioContext()\r\n            this.analizer = context.createAnalyser()\r\n            const src = context.createMediaStreamSource(stream)\r\n            src.connect(this.analizer)\r\n            this._loop()\r\n        })\r\n    }\r\n\r\n    _loop = () =>{\r\n        window.requestAnimationFrame(this._loop)\r\n        this.analizer.getByteFrequencyData(this.frequency)\r\n        this.setState({\r\n            checkVoice: this.frequency[0]\r\n        })\r\n    }\r\n\r\n    _setCheckVoice = (frequency) => {\r\n        if(this.state.isRecord){\r\n            if(frequency > 30){\r\n                return{\r\n                    borderColor: 'green',\r\n                    color: 'green'\r\n                }\r\n            }else{\r\n                return{\r\n                    borderColor: 'black',\r\n                    color: 'black'\r\n                }\r\n            }\r\n        }else{\r\n            return{\r\n                borderColor: 'black',\r\n                color: 'black'\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getPermition()\r\n        axios.get('http://95.163.215.127:3000/texts').then(r => {\r\n            for(let i = 0; i< r.data.length; i++){\r\n                this.state.images.push(r.data[i].image)\r\n                this.state.names.push(r.data[i].name)\r\n                this._getWordsArray(r.data[i].text)\r\n            }\r\n            this.setState({\r\n                currentImage: this.state.images[0],\r\n                currentName: this.state.names[0],\r\n                currentText: this.state.texts[0]\r\n            })\r\n        })\r\n    }\r\n\r\n    _getWordsArray = (text) => {\r\n        text = text.split(' ')\r\n        let finalText = []\r\n        let _id = 0\r\n        for(let i=0; i<text.length; i++){\r\n            let oneWord = {\r\n                id: _id,\r\n                word: text[i],\r\n                style: 'default'\r\n            }\r\n            finalText.push(oneWord)\r\n            _id++\r\n            if(i !== text.length -1){\r\n                let oneWord = {\r\n                    id: _id,\r\n                    word: ' ',\r\n                    style: 'default'\r\n                }\r\n                finalText.push(oneWord)\r\n                _id++\r\n            }\r\n        }\r\n        this.state.texts.push(finalText)\r\n    }\r\n\r\n    _setBackground = (image) => {\r\n        image = 'url(data:image/jpeg;base64,' + image + ')'\r\n        return{\r\n            backgroundImage: image,\r\n        }\r\n    }\r\n\r\n    _clickArrowRight = () => {\r\n        if(this.state.currentId < this.state.names.length - 1){\r\n            let index = this.state.currentId\r\n            let per = this.state.percents\r\n            per = per + 25\r\n            index++\r\n            this.setState({\r\n                currentName: this.state.names[index],\r\n                currentText: this.state.texts[index],\r\n                currentImage: this.state.images[index],\r\n                currentId: index,\r\n                percents: per\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    _clickArrowLeft = () => {\r\n        if(this.state.currentId > 0){\r\n            let index = this.state.currentId\r\n            let per = this.state.percents\r\n            per = per - 25\r\n            index--\r\n            this.setState({\r\n                currentName: this.state.names[index],\r\n                currentText: this.state.texts[index],\r\n                currentImage: this.state.images[index],\r\n                currentId: index,\r\n                percents: per\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    _countPercents = (percent) =>{\r\n        let perStr = String(percent)\r\n        perStr = perStr + '%'\r\n        return perStr\r\n    }\r\n\r\n    _countWidth = (percent) =>{\r\n        let perStr = String(percent)\r\n        perStr = perStr + '%'\r\n        return{\r\n            width: perStr\r\n        }\r\n    }\r\n\r\n    _startRecord(){\r\n        this.Recorder.start()\r\n    }\r\n\r\n    _stopRecord = async () => {\r\n        this.Recorder.stop()\r\n        const result = await this._getResult()\r\n        let voice = []\r\n        voice.push(result)\r\n        const voiceBlob = new Blob(voice, {\r\n            type: 'audio/wav'\r\n        })\r\n        const finalString = await this._getBinaryString(voiceBlob)\r\n        console.log(this.state.currentName)\r\n        axios.post('http://95.163.215.127:3000/saveRecord',{\r\n            textName : this.state.currentName,\r\n            record: finalString\r\n        }).then(r => {\r\n            const id = r.data.result._id\r\n            axios.post('http://95.163.215.127:3000/checkRecord',{\r\n                textName : this.state.currentName,\r\n                recordId: id\r\n            }).then(r => {\r\n                let answers = r.data\r\n                let counter = 0\r\n                let tmp = this.state.currentText\r\n                console.log(answers)\r\n                for(let i = 0; i<tmp.length; i++){\r\n                    if(tmp[i].word !== ' '){\r\n                        if(answers[counter] === 0){\r\n                            tmp[i].style = 'wrong'\r\n                        }else{\r\n                            tmp[i].style = 'right'\r\n                        }\r\n                        counter++\r\n                    }\r\n                }\r\n                console.log(tmp)\r\n            })\r\n        })\r\n    }\r\n\r\n    _getBinaryString = (voiceBlob) => {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader()\r\n            reader.onload = () => {\r\n              resolve(reader.result)\r\n            }\r\n            reader.onerror = reject\r\n            reader.readAsDataURL(voiceBlob)\r\n          })\r\n    }\r\n\r\n    _getResult = () => {\r\n        return new Promise((resolve) => {\r\n            this.Recorder.ondataavailable = (e) => {\r\n              resolve(e.data)\r\n            }\r\n          })\r\n        }\r\n\r\n    _clickRecordButton = () => {\r\n        if(this.state.isRecord === false){\r\n            this.setState({\r\n                isRecord: true,\r\n                microIcon: faPause\r\n            })\r\n\r\n            this._startRecord()\r\n        }else{\r\n            this.setState({\r\n                isRecord: false,\r\n                microIcon: faMicrophone\r\n            })\r\n            this._stopRecord()\r\n        }\r\n    }\r\n\r\n    _setAnswerColor = (style) =>{\r\n        if(style === 'wrong'){\r\n            return{\r\n                backgroundColor: 'rgba(255, 0, 0, 0.7)',\r\n                lineHeight: 2,\r\n                borderRadius: 6\r\n            }\r\n        }\r\n\r\n        if(style === 'right'){\r\n            return{\r\n                backgroundColor: 'rgba(0, 128, 0, 0.7)',\r\n                lineHeight: 2,\r\n                borderRadius: 6\r\n            }\r\n        }\r\n\r\n        if(style === 'default'){\r\n            return{\r\n                backgroundColor: 'transparent',\r\n                fontSize: 36,\r\n                lineHeight: 2,\r\n                borderRadius: 6\r\n            }\r\n        }\r\n    }\r\n\r\n    _checkLeftArrow = (tmp) =>{\r\n        if(tmp === this.state.names[0]){\r\n            return{\r\n                visibility: \"hidden\"\r\n            }\r\n        }\r\n    }\r\n\r\n    _checkRightArrow = (tmp) =>{\r\n        if(tmp === (this.state.names[this.state.names.length - 1])){\r\n            return{\r\n                visibility: \"hidden\"\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = \"wrapper\" style={this._setBackground(this.state.currentImage)}>\r\n                <div className=\"sidesWrapper\">\r\n                    <div className = \"leftSide\">\r\n                        <p className=\"textBlock\">{\r\n                            this.state.currentText.map((item) => (\r\n                            <span key={item.id} style = {this._setAnswerColor(item.style)}>{item.word}</span>\r\n                            ))\r\n                        }</p>\r\n                    </div>\r\n                    <div className = \"rightSide\">\r\n                        <img src= {bird}></img>\r\n                    </div>\r\n                </div>\r\n                <div className=\"controlBlock\">\r\n                    <div className=\"pageControll\">\r\n                        <div className=\"progressBar\">\r\n                            <div className=\"progressInner\" style = {this._countWidth(this.state.percents)}>\r\n                            </div>\r\n                            <div className=\"percents\">\r\n                                <p>{this._countPercents(this.state.percents)}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"arrowsBlock\">\r\n                            <a className=\"controlBtn\" href=\"#\" onClick = {this._clickArrowLeft} style = {this._checkLeftArrow(this.state.currentName)}><FontAwesomeIcon icon={faArrowLeft} /></a>\r\n                            <a className=\"controlBtn\" href=\"#\" onClick = {this._clickRecordButton} style= { this._setCheckVoice(this.state.checkVoice) }><FontAwesomeIcon icon={this.state.microIcon} /></a>\r\n                            <a className=\"controlBtn\" href=\"#\" onClick = {this._clickArrowRight} style = {this._checkRightArrow(this.state.currentName)}><FontAwesomeIcon icon={faArrowRight} /></a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Plabook from './Plabook'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Plabook />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}